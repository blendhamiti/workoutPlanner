import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class Exercises {
    WorkoutPlannerDao workoutPlannerDao;
    List<Exercise> exercises;

    private JTable exercisesTable;
    private JButton addButton;
    private JButton removeButton;
    private JPanel rootPanel;

    public Exercises() {
        workoutPlannerDao = new WorkoutPlannerDaoImpl();
        exercises = workoutPlannerDao.getExercises();
        $$$setupUI$$$();

        AbstractTableModel tableModel = (AbstractTableModel) exercisesTable.getModel();
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Exercise exercise = new Exercise("No name", 0, 0, 0);
                exercises.add(exercise);
                workoutPlannerDao.addExercise(exercise);
                tableModel.fireTableRowsInserted(exercises.size() - 1, exercises.size() - 1);
            }
        });
        removeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRowIndex = exercisesTable.getSelectedRow();
                if (selectedRowIndex >= 0) {
                    Exercise exercise = exercises.get(selectedRowIndex);
                    exercises.remove(exercise);
                    workoutPlannerDao.removeExercise(exercise);
                    tableModel.fireTableRowsDeleted(exercises.size() - 1, exercises.size() - 1);
                }
            }
        });
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Exercises");
        frame.setContentPane(new Exercises().rootPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void createUIComponents() {
        TableModel tableModel = new AbstractTableModel() {
            String[] columnsNames = new String[]{"Name", "Duration", "Repetitions", "Sets"};
            Class[] columnsClasses = new Class[]{String.class, Integer.class, Integer.class, Integer.class};

            @Override
            public String getColumnName(int column) {
                return columnsNames[column];
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return columnsClasses[columnIndex];
            }

            @Override
            public int getRowCount() {
                return exercises.size();
            }

            @Override
            public int getColumnCount() {
                return columnsNames.length;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                switch (columnIndex) {
                    case 0: return exercises.get(rowIndex).getName();
                    case 1: return exercises.get(rowIndex).getDuration();
                    case 2: return exercises.get(rowIndex).getRepetitions();
                    case 3: return exercises.get(rowIndex).getSets();
                    default: return null;
                }
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return true;
            }

            @Override
            public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                switch (columnIndex) {
                    case 0:
                        exercises.get(rowIndex).setName((String) aValue);
                        break;
                    case 1:
                        exercises.get(rowIndex).setDuration((Integer) aValue);
                        break;
                    case 2:
                        exercises.get(rowIndex).setRepetitions((Integer) aValue);
                        break;
                    case 3:
                        exercises.get(rowIndex).setSets((Integer) aValue);
                        break;
                }
                workoutPlannerDao.updateExercise(exercises.get(rowIndex));
            }
        };
        exercisesTable = new JTable(tableModel);
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("All exercises");
        rootPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addButton = new JButton();
        addButton.setText("Add");
        panel1.add(addButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeButton = new JButton();
        removeButton.setText("Remove");
        panel1.add(removeButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setViewportView(exercisesTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
